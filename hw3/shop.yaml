openapi: 3.0.3
info:
  title: Online store API
  description: Online store API
  version: 1.0.0
servers:
  - url: 'https://localhost'
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
            type: string
      xml:
        name: User
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer
          format: int64
        image_link:
          type: string
      xml:
        name: Item
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        itemId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
paths:
  /user/login:
    post:
      tags:
        - user
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: invalid username/password supplied
          content: { }
  /user/logout:
    post:
      tags:
        - user
      summary: log out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: { }
  /items:
    get:
      tags:
        - item
      summary: List of items with filters
      operationId: ListItems
      parameters:
        - name: price_min
          in: query
          description: Lower price limit
          required: false
          schema:
            type: integer
            format: int64
        - name: price_max
          in: query
          description: Upper price limit
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        400:
          description: Invalid price range
          content: { }
    post:
      tags:
        - item
      summary: Add a new item to the store
      operationId: CreateItem
      parameters:
        - name: body
          in: query
          description: Item object that needs to be added to the store
          required: true
          schema:
            $ref: "#/components/schemas/Item"
      responses:
        405:
          description: "invalid input"
      security:
        - api_key: [ ]
  /items/upload_image:
    post:
      tags:
        - item
      summary: uploads an image
      operationId: UploadImage
      parameters:
        - name: additionalMetadata
          in: query
          description: additional data to pass to the server
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: Additional data to pass to server
                file:
                  type: string
                  description: file to upload
                  format: binary
      responses:
        201:
          description: successful operation
          content: { }
      security:
        - api_key: [ ]
  /items/{itemId}:
    get:
      tags:
        - item
      summary: Find item by ID
      operationId: GetItem
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successful operation
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/Item"
        400:
          description: invalid ID supplied
          content: { }
    put:
      tags:
        - item
      summary: Update an item in the store with form data
      operationId: UpdateItem
      parameters:
        - name: itemId
          in: path
          description: ID of Item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: invalid input
          content: { }
      security:
        - api_key: [ ]
    delete:
      tags:
        - item
      summary: Delete an item
      operationId: DeleteItem
      parameters:
        - name: itemId
          in: path
          description: Item ID to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: { }
        404:
          description: Item not found
          content: { }
      security:
        - api_key: [ ]





  /orders:
    get:
      tags:
        - order
      summary: List of orders
      operationId: ListOrders
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        400:
          description: Invalid price range
          content: { }
      security:
        - api_key: [ ]
    post:
      tags:
        - order
      summary: Add a new order
      operationId: CreateOrder
      requestBody:
        description: order placed for purchasing the pet
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Invalid Order
          content: { }
      x-codegen-request-body-name: body
      security:
        - api_key: [ ]
  /orders/{orderId}:
    get:
      tags:
        - order
      summary: Find order by ID
      operationId: GetOrder
      parameters:
        - name: orderId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            aplication/json:
              schema:
                $ref: "#/components/schemas/Order"
        400:
          description: invalid ID supplied
          content: { }
    put:
      tags:
        - order
      summary: Update an order
      operationId: UpdateOrder
      parameters:
        - name: orderId
          in: path
          description: ID of Order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: order placed for purchasing the pet
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Order'
        required: true
      responses:
        405:
          description: invalid input
          content: { }
      security:
        - api_key: [ ]
